from PyQt5.QtWidgets import QApplication, QMainWindow, QGridLayout, QLabel, QWidget, QScrollArea, QVBoxLayout, QHBoxLayout, QLineEdit, QComboBox
from PyQt5.QtCore import Qt
import sys
import csv

appWidth = 1280
appHeight = 720

listMarque = []
listFournisseur = []
listRechercheElements = []

inventaireData = list(csv.reader(open("inventaire.csv", encoding="utf-8"), delimiter=";"))

def isRowEmpty(row):
    if row[0] and row[1] and row[2] and row[3] and row[4]:
        return True
    else:
        return False

def deleteAllRows(gridView: QGridLayout):
    for i in reversed(range(gridView.count())):
        gridView.itemAt(i).widget().deleteLater()

def addRows(rows, gridView: QGridLayout):
    gridView.addWidget(QLabel("Numéro"), 0, 0, Qt.AlignTop)
    gridView.addWidget(QLabel("Item"), 0, 1, Qt.AlignTop)
    gridView.addWidget(QLabel("Fabricant"), 0, 2, Qt.AlignTop)
    gridView.addWidget(QLabel("Fournisseur"), 0, 3, Qt.AlignTop)
    gridView.addWidget(QLabel("Prix"), 0, 4, Qt.AlignTop)

    i = 1
    for row in rows:
        if isRowEmpty(row):
            if not row[2] in listMarque:
                listMarque.append(row[2])
            
            if not row[3] in listFournisseur:
                listFournisseur.append(row[3])

            gridView.addWidget(QLabel(row[0]), i, 0, Qt.AlignTop)
            gridView.addWidget(QLabel(row[1]), i, 1, Qt.AlignTop)
            gridView.addWidget(QLabel(row[2]), i, 2, Qt.AlignTop)
            gridView.addWidget(QLabel(row[3]), i, 3, Qt.AlignTop)
            gridView.addWidget(QLabel(row[4]), i, 4, Qt.AlignTop)
            i = i + 1

            gridView.setRowMinimumHeight(i, 10)
            gridView.setRowStretch(i, 0)

def resetSearch(dontReset):
    for element in listRechercheElements:
        if isinstance(element, QComboBox) and element != dontReset:
            element.setCurrentText("N/A")
        elif isinstance(element, QLineEdit) and element != dontReset:
            element.setText("")

def numeroPieceTextChanged(textbox):
    resetSearch(textbox)
    deleteAllRows(itemGrid)
    if len(textbox.text()) == 0:
        addRows(inventaireData, itemGrid)
    else:
        rowsToShow = []
        for row in inventaireData:
            if row[0].lower().startswith(textbox.text().lower()):
                rowsToShow.append(row)
        addRows(rowsToShow, itemGrid)

def descTextChanged(textbox):
    resetSearch(textbox)
    deleteAllRows(itemGrid)
    if len(textbox.text()) == 0:
        addRows(inventaireData, itemGrid)
    else:
        rowsToShow = []
        for row in inventaireData:
            if textbox.text().lower() in row[1].lower():
                rowsToShow.append(row)
        addRows(rowsToShow, itemGrid)

def marqueChanged(combobox):
    resetSearch(combobox)
    deleteAllRows(itemGrid)
    if combobox.currentText() == "N/A":
        addRows(inventaireData, itemGrid)
    else:
        rowsToShow = []
        for row in inventaireData:
            if combobox.currentText() == row[2]:
                rowsToShow.append(row)
        addRows(rowsToShow, itemGrid)

def fournisseurChanged(combobox):
    resetSearch(combobox)
    deleteAllRows(itemGrid)
    if combobox.currentText() == "N/A":
        addRows(inventaireData, itemGrid)
    else:
        rowsToShow = []
        for row in inventaireData:
            if combobox.currentText() == row[3]:
                rowsToShow.append(row)
        addRows(rowsToShow, itemGrid)

def createWidget(layout):
    widget = QWidget()
    widget.setLayout(layout)
    return widget

def createScrollableWidget(layout):
    scroll = QScrollArea()
    scroll.setWidgetResizable(True)
    scroll.setWidget(createWidget(layout))
    return scroll

app = QApplication(sys.argv)
window = QMainWindow()
window.setGeometry(int(app.primaryScreen().size().width() / 2 - appWidth / 2), int(app.primaryScreen().size().height() / 2 - appHeight / 2), appWidth, appHeight)
window.setWindowTitle("TP Exploitation de BD")
window.setStyleSheet("background-color: white;")

rootVBox = QVBoxLayout()
itemGrid = QGridLayout()

addRows(inventaireData, itemGrid)
rootVBox.addWidget(createScrollableWidget(itemGrid))

rechercheHBox = QHBoxLayout()

recherchePiece = QLineEdit()
recherchePiece.setPlaceholderText("#Piece")
recherchePiece.textChanged.connect(lambda: numeroPieceTextChanged(recherchePiece))
listRechercheElements.append(recherchePiece)

marqueCombo = QComboBox()
marqueCombo.addItem("N/A")
marqueCombo.textActivated.connect(lambda: marqueChanged(marqueCombo))
for marque in listMarque:
    marqueCombo.addItem(marque)

listRechercheElements.append(marqueCombo)

fournisseurCombo = QComboBox()
fournisseurCombo.addItem("N/A")
fournisseurCombo.textActivated.connect(lambda: fournisseurChanged(fournisseurCombo))
for fournisseur in listFournisseur:
    fournisseurCombo.addItem(fournisseur)

listRechercheElements.append(fournisseurCombo)
    
rechercheDesc = QLineEdit()
rechercheDesc.setPlaceholderText("Description")
rechercheDesc.textChanged.connect(lambda: descTextChanged(rechercheDesc))
listRechercheElements.append(rechercheDesc)

rechercheHBox.addWidget(QLabel("Recherche par pièce"))
rechercheHBox.addWidget(recherchePiece)
rechercheHBox.addWidget(QLabel("Recherche par marque"))
rechercheHBox.addWidget(marqueCombo)
rechercheHBox.addWidget(QLabel("Recherche par fournisseur"))
rechercheHBox.addWidget(fournisseurCombo)
rechercheHBox.addWidget(QLabel("Recherche par description"))
rechercheHBox.addWidget(rechercheDesc)

rootVBox.addWidget(createWidget(rechercheHBox))
window.setCentralWidget(createWidget(rootVBox))

window.show()

sys.exit(app.exec())